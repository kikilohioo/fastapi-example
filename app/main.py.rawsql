# from typing import Optional
from fastapi import FastAPI, Response, status, HTTPException
from pydantic import BaseModel
from random import randrange
import psycopg2
from psycopg2.extras import RealDictCursor
import time

app = FastAPI()


class Post(BaseModel):
    title: str
    content: str
    published: bool = True
    # rating: Optional[int] = None // Example of optional field


while True:
    try:
        conn = psycopg2.connect(
            host='localhost',
            port=5433,
            database='fastapi',
            user='postgres',
            password='C25wtfv9yo...',
            cursor_factory=RealDictCursor)

        cursor = conn.cursor()
        print('Database connection was successful!')
        break
    except Exception as error:
        print('Error connecting to database:', error)
        time.sleep(2)


@app.get('/')
async def root():
    return {'message': 'Hello World'}


@app.get('/posts')
async def get_posts():
    cursor.execute('SELECT * FROM posts')
    posts = cursor.fetchall()

    return {'data': posts}


@app.post('/posts', status_code=status.HTTP_201_CREATED)
async def root(post: Post):
    cursor.execute('INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING *',
                   (post.title, post.content, post.published))

    new_post = cursor.fetchone()
    conn.commit()

    return {'message': 'Post created successfully', 'data': new_post}


@app.get('/posts/{id}')
async def get_post(id: int):
    cursor.execute('SELECT * FROM posts WHERE id = %s', [str(id)])
    post = cursor.fetchone()

    if not post:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f'post con id: {id} no se encontro')

    return {'data': post}


@app.put('/posts/{id}')
async def update_post(id: int, post: Post):
    cursor.execute('UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s RETURNING *',
                   (post.title, post.content, post.published, str(id)))
    updated_post = cursor.fetchone()
    conn.commit()

    if not updated_post:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f'post con id: {id} no se encontro')

    return {'data': updated_post}


@app.delete('/posts/{id}', status_code=status.HTTP_204_NO_CONTENT)
async def delete_post(id: int):
    cursor.execute('DELETE FROM posts WHERE id = %s RETURNING *', [str(id)])
    delete_post = cursor.fetchone()
    conn.commit()

    if not delete_post:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f'post con id: {id} no se encontro')

    return Response(status_code=status.HTTP_204_NO_CONTENT)
